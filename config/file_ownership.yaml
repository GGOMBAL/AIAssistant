# File Ownership and Access Control - Multi-Agent Trading System
# Updated: 2025-09-21 - Based on actual implementation analysis
# Orchestrator + 4 Specialized Agents

# ===== FILE OWNERSHIP MATRIX =====
file_ownership:

  # ===== ORCHESTRATOR AGENT =====
  orchestrator_agent:
    layer: "Orchestration Layer"
    model: "claude-3-opus-20240229"

    exclusive_files:
      - path: "main_orchestrator_production.py"
        permissions: ["read", "write", "execute"]
        description: "Main production orchestrator entry point"

      - path: "production_orchestrator.py"
        permissions: ["read", "write", "execute"]
        description: "Production orchestrator implementation"

      - path: "orchestrator_reviewer.py"
        permissions: ["read", "write", "execute"]
        description: "Quality review and correction system"

      - path: "storage/agent_interactions/"
        permissions: ["read", "write"]
        description: "Agent interaction logs and coordination data"

      - path: "outputs/agent_results/"
        permissions: ["read", "write"]
        description: "Workflow results and orchestration outputs"

    read_only_access:
      - "All agent output files and directories"
      - "All configuration files"
      - "System logs and monitoring data"

  # ===== DATA AGENT =====
  data_agent:
    layer: "Data Layer"
    model: "gemini-2.5-flash"

    exclusive_files:
      # Indicator Layer
      - path: "Project/indicator/technical_indicators.py"
        permissions: ["read", "write", "execute"]
        description: "Technical indicator calculations and analysis engine"

      - path: "Project/indicator/data_frame_generator.py"
        permissions: ["read", "write", "execute"]
        description: "DataFrame generation and data management"

      - path: "Project/indicator/__init__.py"
        permissions: ["read", "write"]
        description: "Indicator layer package initialization"

      # Database Layer
      - path: "Project/database/database_manager.py"
        permissions: ["read", "write", "execute"]
        description: "Unified database management system"

      - path: "Project/database/mongodb_operations.py"
        permissions: ["read", "write", "execute"]
        description: "MongoDB CRUD operations"

      - path: "Project/database/us_market_manager.py"
        permissions: ["read", "write", "execute"]
        description: "US market data management"

      - path: "Project/database/historical_data_manager.py"
        permissions: ["read", "write", "execute"]
        description: "Account and trade history management"

      - path: "Project/database/database_name_calculator.py"
        permissions: ["read", "write", "execute"]
        description: "Database naming and path calculation utilities"

      - path: "Project/database/__init__.py"
        permissions: ["read", "write"]
        description: "Database layer package initialization"

    shared_read_access:
      - path: "config/api_credentials.yaml"
        permissions: ["read"]
        description: "Read API credentials for data providers"

      - path: "config/broker_config.yaml"
        permissions: ["read"]
        description: "Read broker configurations for market data"

    provides_to:
      - agent: "strategy_agent"
        data_types: ["technical_indicators", "market_data", "fundamental_data"]
        access_level: "read_only"

      - agent: "service_agent"
        data_types: ["historical_data", "account_data", "trade_history"]
        access_level: "read_only"

  # ===== STRATEGY AGENT =====
  strategy_agent:
    layer: "Strategy Layer"
    model: "gemini-2.5-flash"

    exclusive_files:
      # Core Strategy Services (실제 구현됨)
      - path: "Project/strategy/signal_generation_service.py"
        permissions: ["read", "write", "execute"]
        description: "Multi-timeframe signal generation and analysis"

      - path: "Project/strategy/position_sizing_service.py"
        permissions: ["read", "write", "execute"]
        description: "Position sizing, risk management, and portfolio optimization"

      - path: "Project/strategy/account_analysis_service.py"
        permissions: ["read", "write", "execute"]
        description: "Account analysis, portfolio evaluation, and risk assessment"

      - path: "Project/strategy/__init__.py"
        permissions: ["read", "write"]
        description: "Strategy layer package initialization"

      # Auto-generated Strategy Files
      - path: "Project/strategy/trading_strategy_*.py"
        permissions: ["read", "write", "execute"]
        description: "Auto-generated trading strategy implementations"

    shared_read_access:
      - path: "Project/indicator/"
        permissions: ["read"]
        description: "Read technical indicators from Data Agent"
        restriction: "Cannot modify indicator calculations"

      - path: "config/risk_management.yaml"
        permissions: ["read"]
        description: "Read risk management parameters"

    note: "Backtest execution functions (buy_stock, sell_stock, half_sell_stock) will be moved to Service Agent"

    provides_to:
      - agent: "service_agent"
        data_types: ["trading_signals", "position_sizes", "risk_parameters"]
        access_level: "read_only"

  # ===== SERVICE AGENT =====
  service_agent:
    layer: "Service Layer"
    model: "gemini-2.5-flash"

    exclusive_files:
      # Current Implementation
      - path: "Project/service/backtest_service_*.py"
        permissions: ["read", "write", "execute"]
        description: "Auto-generated backtest service implementations"

      - path: "Project/service/__init__.py"
        permissions: ["read", "write"]
        description: "Service layer package initialization"

    # Future files to be created (백테스트 함수 이관 후)
    planned_files:
      - path: "Project/service/buy_stock_service.py"
        source: "Project/strategy/position_sizing_service.py"
        function: "buy_stock"
        description: "Stock purchase execution service"

      - path: "Project/service/sell_stock_service.py"
        source: "Project/strategy/position_sizing_service.py"
        function: "sell_stock"
        description: "Stock selling execution service"

      - path: "Project/service/half_sell_service.py"
        source: "Project/strategy/position_sizing_service.py"
        function: "half_sell_stock"
        description: "Partial position selling service"

      - path: "Project/service/pyramid_buy_service.py"
        source: "Project/strategy/position_sizing_service.py"
        function: "pyramid_buy"
        description: "Pyramiding buy execution service"

      - path: "Project/service/order_execution_service.py"
        permissions: ["read", "write", "execute"]
        description: "Real-time order execution and management"

      - path: "Project/service/risk_management_service.py"
        permissions: ["read", "write", "execute"]
        description: "Real-time risk monitoring and control"

      - path: "Project/service/performance_analyzer.py"
        permissions: ["read", "write", "execute"]
        description: "Performance analysis and reporting"

    shared_read_access:
      - path: "Project/strategy/"
        permissions: ["read"]
        description: "Read trading signals and strategy parameters"
        restriction: "Cannot modify strategy logic"

      - path: "Project/database/"
        permissions: ["read"]
        description: "Read historical data for backtesting"
        restriction: "Cannot modify database structure"

    provides_to:
      - agent: "helper_agent"
        data_types: ["order_execution_requests", "trade_confirmations"]
        access_level: "execution_requests"

  # ===== HELPER AGENT =====
  helper_agent:
    layer: "External Integration Layer"
    model: "gemini-2.5-flash"

    exclusive_files:
      # Core Helper Services
      - path: "Project/Helper/broker_api_connector.py"
        permissions: ["read", "write", "execute"]
        description: "Broker API integration and management"

      - path: "Project/Helper/data_provider_api.py"
        permissions: ["read", "write", "execute"]
        description: "External data provider API integrations"

      - path: "Project/Helper/kis_api_helper_us.py"
        permissions: ["read", "write", "execute"]
        description: "Korea Investment Securities US trading API"

      - path: "Project/Helper/kis_common.py"
        permissions: ["read", "write", "execute"]
        description: "KIS common functions and utilities"

      - path: "Project/Helper/telegram_messenger.py"
        permissions: ["read", "write", "execute"]
        description: "Telegram notification and messaging services"

      - path: "Project/Helper/yfinance_helper.py"
        permissions: ["read", "write", "execute"]
        description: "Yahoo Finance API helper and data collection"

      - path: "Project/Helper/HELPER_AGENT_ACCESS_CONTROL.md"
        permissions: ["read", "write"]
        description: "Helper agent access control documentation"

      - path: "Project/Helper/__init__.py"
        permissions: ["read", "write"]
        description: "Helper layer package initialization"

      # Exclusive Configuration
      - path: "myStockInfo.yaml"
        permissions: ["read", "write"]
        description: "Personal trading preferences and configurations"
        note: "EXCLUSIVE to Helper Agent - contains sensitive user preferences"

    shared_read_access:
      - path: "config/api_credentials.yaml"
        permissions: ["read"]
        description: "External API credentials and authentication"

      - path: "config/broker_config.yaml"
        permissions: ["read"]
        description: "Broker configuration and trading parameters"

    provides_to:
      - agent: "data_agent"
        data_types: ["market_data", "external_data_feeds"]
        access_level: "data_provision"

      - agent: "strategy_agent"
        data_types: ["account_status", "balance_info", "holdings_data"]
        access_level: "account_information"

# ===== ACCESS CONTROL RULES =====
access_control:

  global_rules:
    - rule: "Agents can only modify files in their exclusive ownership"
    - rule: "Shared read access must be explicitly defined"
    - rule: "Configuration files require careful validation before modification"
    - rule: "All file operations must be logged for audit purposes"
    - rule: "Cross-agent data sharing happens through defined interfaces only"

  security_policies:
    - policy: "myStockInfo.yaml is EXCLUSIVELY accessible by Helper Agent"
    - policy: "Database write operations are EXCLUSIVELY handled by Data Agent"
    - policy: "Strategy logic modifications are EXCLUSIVELY handled by Strategy Agent"
    - policy: "Order execution is EXCLUSIVELY handled through Service Agent → Helper Agent chain"

  emergency_access:
    - agent: "orchestrator_agent"
      description: "Emergency read access to all files for system recovery"
      requires_approval: true
      audit_level: "critical"

  read_only_shared_configs:
    files:
      - "config/agent_model.yaml"
      - "config/agent_interfaces.yaml"
      - "config/file_ownership.yaml"
      - "config/mcp_integration.yaml"
    agents: ["all"]
    description: "System configuration files - read-only for all agents"

# ===== CROSS-AGENT DEPENDENCIES =====
dependencies:

  strategy_agent_dependencies:
    requires:
      - owner: "data_agent"
        files: ["Project/indicator/technical_indicators.py", "Project/indicator/data_frame_generator.py"]
        access_type: "read_only"
        reason: "Requires processed market data and technical indicators"

      - owner: "helper_agent"
        files: ["Project/Helper/broker_api_connector.py"]
        access_type: "read_only"
        reason: "Needs account status for position analysis"

  service_agent_dependencies:
    requires:
      - owner: "strategy_agent"
        files: ["Project/strategy/signal_generation_service.py", "Project/strategy/position_sizing_service.py"]
        access_type: "read_only"
        reason: "Requires trading signals and position parameters"

      - owner: "helper_agent"
        files: ["Project/Helper/broker_api_connector.py"]
        access_type: "execution_interface"
        reason: "Needs broker connectivity for order execution"

    migration_plan:
      - description: "Move backtest execution functions from Strategy to Service layer"
        source_files: ["Project/strategy/position_sizing_service.py"]
        target_files: ["Project/service/buy_stock_service.py", "Project/service/sell_stock_service.py", "Project/service/half_sell_service.py"]
        functions: ["buy_stock", "sell_stock", "half_sell_stock", "pyramid_buy"]
        timeline: "Phase 2 development"

  data_agent_dependencies:
    requires:
      - owner: "helper_agent"
        files: ["Project/Helper/data_provider_api.py", "Project/Helper/yfinance_helper.py"]
        access_type: "data_interface"
        reason: "Requires external market data feeds"

# ===== AGENT PERMISSION MATRIX =====
permission_matrix:
  # [Orchestrator, Data, Strategy, Service, Helper]
  orchestrator_files: ["RW", "R", "R", "R", "R"]     # Orchestrator controls coordination
  indicator_files: ["-", "RW", "R", "R", "-"]        # Data Agent owns, others read
  database_files: ["-", "RW", "R", "R", "-"]         # Data Agent exclusive database access
  strategy_files: ["R", "-", "RW", "R", "-"]         # Strategy Agent owns strategy logic
  service_files: ["R", "-", "R", "RW", "-"]          # Service Agent owns execution
  helper_files: ["R", "-", "-", "-", "RW"]           # Helper Agent owns external APIs
  config_files: ["RW", "R", "R", "R", "R"]           # Orchestrator manages, others read
  mystockinfo: ["-", "-", "-", "-", "RW"]             # Helper Agent exclusive
  storage_logs: ["RW", "R", "R", "R", "R"]           # Orchestrator manages, others read

# Legend:
# RW = Read + Write, R = Read Only, - = No Access

# ===== VALIDATION RULES =====
validation:

  file_integrity:
    - "All Python files must pass syntax validation"
    - "All YAML files must pass schema validation"
    - "All file modifications must maintain backward compatibility"

  permission_enforcement:
    - "File access attempts outside permissions are blocked and logged"
    - "Cross-agent file modifications require explicit approval"
    - "Emergency access requires multi-factor authentication"

  audit_requirements:
    - "All file access is logged with timestamp and agent identity"
    - "Permission violations trigger immediate alerts"
    - "Daily audit reports are generated automatically"

# ===== IMPLEMENTATION STATUS =====
implementation_status:
  completed:
    - "Data Agent: indicator and database layers fully implemented"
    - "Strategy Agent: core services implemented (signal_generation, position_sizing, account_analysis)"
    - "Helper Agent: external API integrations implemented"
    - "Configuration files: agent_interfaces, file_ownership, agent_model"

  in_progress:
    - "Service Agent: backtest service partially implemented"

  planned:
    - "Service Agent: migration of backtest execution functions from Strategy layer"
    - "Service Agent: real-time order execution and risk management"
    - "Integration testing of all agent interactions"

  next_phase:
    - "Complete Service Agent implementation"
    - "Implement cross-agent validation and testing"
    - "Deploy production system with full monitoring"