# AI Assistant Agent LLM Model Configuration
# 각 에이전트별 사용 LLM 모델 정의
# 작성일: 2025-09-15
# 관리: Orchestrator Agent

version: "1.0"
last_updated: "2025-09-15"

# LLM 모델 정의
models:
  claude_opus:
    model_id: "claude-3-opus-20240229"
    provider: "anthropic"
    tier: "premium"
    use_cases: ["complex_strategy", "critical_decisions", "advanced_analysis"]
    cost_level: "high"
    max_tokens: 200000

  claude_sonnet:
    model_id: "claude-3-sonnet-20240229"
    provider: "anthropic"
    tier: "standard"
    use_cases: ["general_processing", "data_analysis", "service_operations"]
    cost_level: "medium"
    max_tokens: 200000

  claude_haiku:
    model_id: "claude-3-haiku-20240307"
    provider: "anthropic"
    tier: "basic"
    use_cases: ["simple_tasks", "quick_responses", "monitoring"]
    cost_level: "low"
    max_tokens: 200000

  gemini_pro:
    model_id: "gemini-pro"
    provider: "google"
    tier: "standard"
    use_cases: ["large_data_processing", "fast_response", "cost_optimization"]
    cost_level: "low"
    max_tokens: 32000
    router_required: true  # claude-code-router 사용 필수

  gemini_flash:
    model_id: "gemini-2.5-flash"
    provider: "google"
    tier: "fast"
    use_cases: ["fast_processing", "efficient_operations", "cost_optimization"]
    cost_level: "very_low"
    max_tokens: 1048576
    router_required: true  # claude-code-router 사용 필수
    api_key_env: "GOOGLE_API_KEY"

# 에이전트별 모델 할당
agents:
  orchestrator:
    primary_model: "claude_opus"
    fallback_model: "claude_sonnet"
    use_cases:
      - "workflow_coordination"
      - "agent_management"
      - "critical_decision_making"
      - "error_resolution"
    model_selection_strategy: "quality_first"

  data_agent:
    primary_model: "gemini_flash"
    fallback_model: "gemini_pro"
    use_cases:
      - "data_processing"
      - "indicator_calculation"
      - "database_operations"
      - "data_validation"
    model_selection_strategy: "efficiency_first"

  strategy_agent:
    primary_model: "gemini_flash"
    fallback_model: "claude_sonnet"
    use_cases:
      - "strategy_development"
      - "signal_generation"
      - "portfolio_optimization"
      - "risk_analysis"
    model_selection_strategy: "quality_first"

  service_agent:
    primary_model: "gemini_flash"
    fallback_model: "claude_haiku"
    use_cases:
      - "backtesting"
      - "order_execution"
      - "service_monitoring"
      - "position_management"
    model_selection_strategy: "reliability_first"

  helper_agent:
    primary_model: "gemini_flash"
    fallback_model: "gemini_pro"
    use_cases:
      - "api_integration"
      - "external_communication"
      - "credential_management"
      - "notification_services"
    model_selection_strategy: "cost_efficiency"

# 모델 선택 전략 정의
selection_strategies:
  quality_first:
    priority: ["accuracy", "reasoning", "complexity_handling"]
    fallback_condition: "api_error"

  efficiency_first:
    priority: ["speed", "cost", "throughput"]
    fallback_condition: "rate_limit"

  reliability_first:
    priority: ["stability", "consistency", "error_rate"]
    fallback_condition: "service_unavailable"

  cost_efficiency:
    priority: ["cost", "speed", "basic_functionality"]
    fallback_condition: "budget_limit"

# LLM 라우터 설정 (claude-code-router)
router_config:
  enabled: true
  router_url: "http://localhost:3000"
  github_repo: "https://github.com/musistudio/claude-code-router"

  # 라우터 엔드포인트
  endpoints:
    health_check: "/api/health"
    route_request: "/api/route"
    get_models: "/api/models"
    get_status: "/api/status"
    metrics: "/api/metrics"

  # Gemini 모델 라우팅 설정
  gemini_routing:
    enabled: true
    proxy_endpoint: "/api/gemini"
    authentication: "api_key"
    rate_limiting:
      requests_per_minute: 60
      requests_per_hour: 1000

  # 로드 밸런싱 설정
  load_balancing:
    strategy: "round_robin"
    health_check_interval: 30  # seconds
    retry_attempts: 3
    fallback_timeout: 10  # seconds

  # 모니터링 설정
  monitoring:
    enabled: true
    metrics:
      - "response_time"
      - "success_rate"
      - "cost_tracking"
      - "usage_statistics"

  # 라우터 클라이언트 설정
  client_config:
    timeout: 30  # seconds
    retry_attempts: 3
    backoff_factor: 2
    max_delay: 60  # seconds

# 사용량 모니터링 및 제한
usage_limits:
  daily_limits:
    claude_opus: 1000  # requests per day
    claude_sonnet: 5000
    claude_haiku: 10000
    gemini_pro: 10000

  cost_limits:
    daily_budget: 100.00  # USD
    monthly_budget: 2000.00  # USD
    alert_threshold: 80  # percentage

  agent_quotas:
    orchestrator: 30%  # of total budget
    data_agent: 25%
    strategy_agent: 30%
    service_agent: 10%
    helper_agent: 5%

# 모델 성능 최적화
optimization:
  caching:
    enabled: true
    cache_duration: 3600  # seconds
    cache_similar_requests: true

  prompt_optimization:
    enabled: true
    compress_prompts: true
    reuse_contexts: true

  batch_processing:
    enabled: true
    batch_size: 10
    batch_timeout: 30  # seconds

# 에러 처리 및 복구
error_handling:
  retry_policy:
    max_retries: 3
    backoff_strategy: "exponential"
    base_delay: 1  # seconds

  fallback_chain:
    - "primary_model"
    - "fallback_model"
    - "emergency_model"  # claude_haiku for all agents

  circuit_breaker:
    enabled: true
    failure_threshold: 5
    reset_timeout: 300  # seconds

# 보안 설정
security:
  api_key_rotation:
    enabled: true
    rotation_interval: 30  # days

  request_logging:
    enabled: true
    log_level: "info"
    exclude_sensitive_data: true

  access_control:
    require_agent_authentication: true
    validate_agent_permissions: true

# 개발 및 테스트 환경
environments:
  development:
    default_model: "claude_haiku"
    cost_tracking: false
    detailed_logging: true

  testing:
    default_model: "claude_sonnet"
    cost_tracking: true
    mock_expensive_models: true

  production:
    model_selection: "as_configured"
    cost_tracking: true
    performance_monitoring: true

# 모델 업그레이드 계획
upgrade_plan:
  scheduled_updates:
    - model: "claude_opus"
      target_version: "claude-3-opus-20241220"
      planned_date: "2024-12-30"

  evaluation_criteria:
    - "performance_improvement"
    - "cost_efficiency"
    - "compatibility"
    - "stability"

# 알림 및 보고
notifications:
  cost_alerts:
    enabled: true
    thresholds: [50, 80, 95]  # percentage of budget

  performance_alerts:
    enabled: true
    response_time_threshold: 10  # seconds
    error_rate_threshold: 5  # percentage

  usage_reports:
    frequency: "daily"
    recipients: ["admin", "orchestrator"]
    include_cost_breakdown: true

# 사용 예시

# 에이전트가 모델을 요청하는 방법:
# 1. 기본 사용: agent_config.get_primary_model("data_agent")
# 2. 특정 작업: agent_config.get_model_for_task("data_agent", "large_data_processing")
# 3. 비용 고려: agent_config.get_cost_efficient_model("helper_agent")
# 4. 폴백 사용: agent_config.get_fallback_model("strategy_agent")

# 라우터 사용 예시:
# router.route_request(
#   agent="data_agent",
#   task="indicator_calculation",
#   model_preference="efficiency_first"
# )