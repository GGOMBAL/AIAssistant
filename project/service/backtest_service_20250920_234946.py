#!/usr/bin/env python3
"""
Backtesting Service - Generated by Orchestrator
Generated: 2025-09-20T23:49:46.158967
Based on agent analysis: interaction_20250920_234856_090_service_agent
"""

import pandas as pd
import numpy as np
from typing import Dict, List
from datetime import datetime

class BacktestService:
    """백테스팅 서비스"""

    def __init__(self):
        self.initial_capital = 100000  # 초기 자본
        self.commission = 0.001  # 수수료 0.1%

    def run_backtest(self, df: pd.DataFrame, signals: List[Dict]) -> Dict[str, any]:
        """백테스팅 실행"""

        portfolio_value = self.initial_capital
        positions = 0
        cash = self.initial_capital
        trades = []

        for signal in signals:
            timestamp = signal['timestamp']
            price = signal['price']
            signal_type = signal['signal']

            if signal_type == 'BUY' and cash > price:
                # 매수
                shares = int(cash * 0.95 / price)  # 95% 자금 사용
                cost = shares * price * (1 + self.commission)

                if cost <= cash:
                    cash -= cost
                    positions += shares
                    trades.append({
                        'timestamp': timestamp,
                        'type': 'BUY',
                        'shares': shares,
                        'price': price,
                        'cost': cost
                    })

            elif signal_type == 'SELL' and positions > 0:
                # 매도
                revenue = positions * price * (1 - self.commission)
                cash += revenue
                trades.append({
                    'timestamp': timestamp,
                    'type': 'SELL',
                    'shares': positions,
                    'price': price,
                    'revenue': revenue
                })
                positions = 0

        # 최종 포트폴리오 가치 계산
        final_price = df['Close'].iloc[-1]
        final_value = cash + (positions * final_price)

        return {
            'initial_capital': self.initial_capital,
            'final_value': final_value,
            'total_return': (final_value - self.initial_capital) / self.initial_capital,
            'total_trades': len(trades),
            'trades': trades
        }

    def calculate_metrics(self, backtest_result: Dict) -> Dict[str, float]:
        """성과 지표 계산"""

        total_return = backtest_result['total_return']
        trades = backtest_result['trades']

        # 샤프 비율 계산 (간단화)
        if len(trades) > 0:
            returns = []
            for i in range(1, len(trades)):
                if trades[i]['type'] == 'SELL' and trades[i-1]['type'] == 'BUY':
                    trade_return = (trades[i]['revenue'] - trades[i-1]['cost']) / trades[i-1]['cost']
                    returns.append(trade_return)

            if returns:
                avg_return = np.mean(returns)
                std_return = np.std(returns)
                sharpe_ratio = avg_return / std_return if std_return > 0 else 0
            else:
                sharpe_ratio = 0
        else:
            sharpe_ratio = 0

        return {
            'total_return': total_return,
            'sharpe_ratio': sharpe_ratio,
            'max_drawdown': self._calculate_max_drawdown(trades),
            'win_rate': self._calculate_win_rate(trades)
        }

    def _calculate_max_drawdown(self, trades: List[Dict]) -> float:
        """최대 손실폭 계산"""
        # 간단화된 구현
        return 0.0

    def _calculate_win_rate(self, trades: List[Dict]) -> float:
        """승률 계산"""
        # 간단화된 구현
        return 0.0

# Agent Response Summary:
# ...
